// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/users_export_template.html
package bot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataUsers_export_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x8b\xdb\x30\x10\xbd\xe7\x57\x0c\x5e\x16\x5a\x58\xc5\x71\xb6\xdb\xa6\x8e\x63\x0a\x7b\xea\xa5\x94\x1e\x7b\x93\xad\xb1\x23\xd0\x87\x91\x94\x8d\x5d\xe3\xff\x5e\x64\x9b\xdd\xd8\x1b\x43\x09\x95\xc1\x20\xe9\xbd\x37\x6f\x24\xcd\x24\x47\x27\x05\x08\xaa\xca\x43\x50\x39\x92\x99\x20\x5d\x25\x47\xa4\x2c\x5d\x01\x00\x24\x12\x1d\x85\xfc\x48\x8d\x45\x77\x08\x4e\xae\x20\xbb\x60\xdc\x72\xdc\x09\x4c\x9f\xf5\x0b\x67\xbf\xd1\x68\x20\xf0\xac\x95\x33\x3c\x3b\x71\xa6\x0d\xda\x24\x1c\x10\x03\xda\xba\x46\x20\xb8\xa6\xc2\x43\xe0\xb0\x76\x61\x6e\x6d\x90\xae\xfa\x4d\x3f\x32\xcd\x1a\x68\x5f\xa7\x7e\x14\x5a\x39\x52\x50\xc9\x45\x13\x03\xa1\x55\x25\x90\xd8\xc6\x3a\x94\x0f\x90\x53\xc1\x33\xc3\x1f\xc0\x52\x65\x89\x45\xc3\x8b\xfd\x2b\xb9\x7b\x93\x5d\xe7\xc4\xe8\xf3\x4c\x98\x71\x5b\x09\xda\xc4\x50\x08\xac\xf7\xd3\x98\x02\x6b\x52\x08\x7d\x8e\xc1\xf3\xce\x86\x56\x4b\xba\xb9\x16\x27\xa9\xe6\x9e\x05\xd6\x31\x44\x10\xc1\xd3\xe6\xfe\x2a\xf3\x9b\x44\xc6\x29\x68\x25\x1a\xb0\xb9\x41\x54\x40\x15\x83\x0f\x92\x2b\x72\xe6\xcc\x1d\x63\xf8\xf2\x79\x57\xd5\x1f\x67\xca\x4b\x11\xa7\x51\xb7\x4f\xf7\xd3\x84\xba\x1b\x3d\x44\xdb\xdd\xe6\x66\x13\x9b\xff\x65\xe2\x69\x73\xb3\x89\xe8\xd3\x7a\xbb\xfb\x17\x1f\xbd\x9c\x72\xa8\xdc\x4c\x4f\x52\x53\x72\x15\x43\x34\x4f\xc7\xbf\x5f\x42\x05\x2f\x55\x0c\x39\x2a\x87\x66\xf9\x8d\x0c\xc2\x5c\x96\x33\xf1\x4c\x1b\x86\x86\x18\xca\xf8\xc9\xfa\x18\x3e\xd3\xfd\x15\x48\x0c\x51\x55\x83\xd5\x82\x33\xb8\xc3\xc2\x7f\x53\xd8\x78\x56\xbb\x85\xf7\x76\xe1\xa2\x9a\x79\xc8\xb5\xd0\x26\x86\xbb\xc7\xc7\xc7\xfd\xfb\xca\xb3\xfc\x0f\xc6\x10\x19\x94\x57\x36\xcf\xc8\xcb\xa3\x8b\x21\xd3\x82\x5d\x86\xf5\xff\x24\xec\x8b\x3d\x5d\x25\xe1\xd0\x49\x12\x5f\xdc\xe9\x2a\x61\xfc\x05\x72\x41\xad\x3d\x04\x7d\x59\x8e\x9d\xa4\x6d\x0d\x55\x25\xc2\xba\x7b\xbb\x9f\x29\x76\xb8\xee\x11\xbe\x04\xe9\x73\x9c\x61\x7a\x9c\x3f\x7c\x6b\xf2\x43\xd0\xb6\xeb\x9f\x46\x17\x5c\xe0\xfa\xbb\xa4\x25\x46\x5f\xb7\x5d\x17\xbc\x23\x0c\x77\xec\x7b\xd7\x84\xf2\x0b\xa9\xf8\x41\x25\x2e\x52\xa8\x70\x4b\x84\x8b\x46\xf7\x6a\xab\x4a\xaf\x62\x93\xb0\x9a\xe5\x19\x32\xfe\xf2\xb6\x74\x31\x6d\x5b\x54\xac\xeb\x56\xe3\x52\x12\x8e\xe7\x1c\xfa\xa6\x9e\xfe\x0d\x00\x00\xff\xff\xda\x9c\x1e\x02\xdb\x05\x00\x00")

func dataUsers_export_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataUsers_export_templateHtml,
		"data/users_export_template.html",
	)
}

func dataUsers_export_templateHtml() (*asset, error) {
	bytes, err := dataUsers_export_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/users_export_template.html", size: 1499, mode: os.FileMode(420), modTime: time.Unix(1584748387, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/users_export_template.html": dataUsers_export_templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"users_export_template.html": &bintree{dataUsers_export_templateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

