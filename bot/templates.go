// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/users_export_template.html
package bot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataUsers_export_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x6f\x9b\x3a\x14\x7e\xcf\xaf\x38\xa2\xaa\x74\xaf\x54\x42\x92\xde\xdc\x65\x84\xa0\x49\x7d\x98\x2a\x4d\xd3\xb4\xc7\xbd\x4c\x27\xf8\x40\xac\x1a\x1b\xd9\x4e\x93\x0c\xf1\xdf\x27\x43\x4a\x0b\x05\xad\x8d\x66\x1e\x10\xf8\x3b\xdf\xf7\x1d\xfb\xf8\x38\xda\xd9\x5c\x80\x40\x99\x6d\xbc\xc2\xfa\x5b\xed\xc5\x93\x68\x47\xc8\xe2\x09\x00\x40\x94\x93\x45\x48\x76\xa8\x0d\xd9\x8d\xb7\xb7\xa9\xbf\xf2\xce\x53\x96\x5b\x41\xf1\x9d\x7a\xe4\xec\x07\x69\x05\x3e\xdc\x29\x69\x35\xdf\xee\x39\x53\x9a\x4c\x14\x34\x88\x06\x6d\xec\x49\x10\xd8\x53\x41\x1b\xcf\xd2\xd1\x06\x89\x31\x5e\x3c\xa9\x27\xdd\xd8\x2a\x76\x82\xb2\xfd\x74\x23\x55\xd2\xfa\x29\xe6\x5c\x9c\x42\xf0\xb1\x28\x04\xf9\xe6\x64\x2c\xe5\x37\x90\xa0\xe0\x5b\xcd\x6f\xc0\xa0\x34\xbe\x21\xcd\xd3\x75\x1b\x5c\x3d\xd3\x4e\x13\x5f\xab\x43\x8f\x98\x71\x53\x08\x3c\x85\x90\x0a\x3a\xae\xbb\x9a\x82\x8e\x7e\x2a\xd4\x21\x04\x17\x77\xd0\x58\x8c\xf1\x26\x4a\xec\x73\xd9\xf7\x2c\xe8\x18\xc2\x0c\x66\xb0\x9c\x5d\x0f\x46\x7e\xca\x89\x71\x04\x25\xc5\x09\x4c\xa2\x89\x24\xa0\x64\xf0\x4f\xce\xa5\x7f\xe0\xcc\xee\x42\xf8\xf0\xff\xaa\x38\xfe\xdb\x63\x1e\x53\xec\xaa\x2e\x96\xd7\xdd\x84\xaa\x0b\x3d\xcc\x17\xab\xd9\xc5\x26\x66\x7f\xcb\xc4\x72\x76\xb1\x89\xf9\x7f\xd3\xc5\xea\x2d\x3e\x6a\x3a\x69\x49\xda\x1e\x5f\x8e\x3a\xe3\x32\x84\x79\x3f\x1d\x57\xbf\x3e\x0a\x9e\xc9\x10\x12\x92\x96\xf4\x78\x8d\x34\xc4\x3c\xcf\x7a\xe4\x5b\xa5\x19\x69\x5f\x23\xe3\x7b\xe3\x34\x5c\xa6\xeb\x01\x48\x08\xf3\xe2\x08\x46\x09\xce\xe0\x8a\x52\xf7\x74\x61\xe7\xb5\x5a\x8d\xd4\xdb\x0b\x17\x45\xcf\x43\xa2\x84\xd2\x21\x5c\xdd\xde\xde\xae\x5f\x9f\x3c\xc3\x7f\x51\x08\x73\x4d\xf9\xc0\xe4\x81\x78\xb6\xb3\x21\x6c\x95\x60\x7f\x92\xc5\xb7\xca\xd6\xeb\xca\x28\x51\x1a\x2d\x57\x32\x04\xa9\x24\x8d\xb1\x0b\x42\x76\x41\x3e\x8b\xf7\xe4\x03\x6d\x45\xcd\xdd\x33\x7b\x4f\x21\x40\x5b\x41\xbe\x55\x45\x08\xcb\x8e\x70\x53\x89\x51\x50\xb7\xc5\x78\x12\x05\x4d\xcf\x8d\x5c\x1b\x8c\x27\x11\xe3\x8f\x90\x08\x34\x66\xe3\xd5\x0d\xec\xa9\xe7\x16\xcf\x7f\x5d\xfe\x5e\x5c\x96\x82\x24\x4c\xab\x0a\x92\x4e\xf3\x85\x04\x19\x1a\xab\x91\x29\x13\x05\x85\x53\x60\xfc\x71\x9c\xb9\x2c\x35\xca\x8c\x1c\x53\xeb\xb1\x8b\x6d\x8e\xdc\x19\x3e\x06\xa9\x37\xbc\x87\xa9\x71\xee\x00\x18\x9d\x6c\xbc\xb2\x9c\x7e\xd3\x2a\xe5\x82\xa6\xf7\x39\x66\x34\xff\xb8\xa8\x2a\xef\x55\x40\xb3\xbc\xee\xfe\xe8\x84\x7c\x27\x14\x5f\x31\xa7\xd1\x10\x14\x76\x2c\xe0\xc5\x65\xd3\xda\x2a\x5e\x5b\xad\xff\x23\xec\x34\xa5\x35\xd3\x67\xb2\x5f\xb8\x7c\x20\x76\x2f\xdd\xbb\xaa\x3c\xb0\xa8\x33\x77\x1d\xfe\xdc\x0a\x94\x0f\x03\xe9\x3e\x8d\x41\x23\xc3\x8a\x01\x0e\xac\x5a\xd0\xf3\x77\xde\xc4\x81\xcf\xb2\x24\xc9\xaa\xaa\xdd\xe6\xe0\x5c\x48\x81\xbb\xdf\xe3\xdf\x01\x00\x00\xff\xff\x07\x14\x9b\xcb\xe6\x07\x00\x00")

func dataUsers_export_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataUsers_export_templateHtml,
		"data/users_export_template.html",
	)
}

func dataUsers_export_templateHtml() (*asset, error) {
	bytes, err := dataUsers_export_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/users_export_template.html", size: 2022, mode: os.FileMode(420), modTime: time.Unix(1584770239, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/users_export_template.html": dataUsers_export_templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"users_export_template.html": &bintree{dataUsers_export_templateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

