// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/users_export_template.html
package bot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataUsers_export_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4f\x8f\x9b\x3e\x10\xbd\xe7\x53\x8c\x58\xad\xf4\xfb\x49\xeb\x00\xd9\xa6\x4d\x09\x41\x95\xf6\xd4\x4b\x55\xf5\xd8\x9b\x83\x07\x62\xc9\xd8\x96\xed\x6c\x42\x11\xdf\xbd\x32\xa4\xec\xc2\x06\xa9\x1b\x15\x4e\xe0\x37\xef\xbd\xf9\xc3\x90\x1e\x5c\x25\x40\x50\x59\xee\x02\xed\xc8\xde\x04\xd9\x22\x3d\x20\x65\xd9\x02\x00\x20\xad\xd0\x51\xc8\x0f\xd4\x58\x74\xbb\xe0\xe8\x0a\xb2\x09\x2e\x47\x8e\x3b\x81\xd9\x93\x7a\xe6\xec\x27\x1a\x05\x04\x9e\x94\x74\x86\xef\x8f\x9c\x29\x83\x36\x0d\x7b\x44\x8f\xb6\xae\x16\x08\xae\xd6\xb8\x0b\x1c\x9e\x5d\x98\x5b\x1b\x64\x8b\xee\xd0\x5f\x7b\xc5\x6a\x68\x86\x47\x7f\x15\x4a\x3a\x52\xd0\x8a\x8b\x3a\x01\x42\xb5\x16\x48\x6c\x6d\x1d\x56\x0f\x90\x53\xc1\xf7\x86\x3f\x80\xa5\xd2\x12\x8b\x86\x17\xdb\x21\xb8\x7d\xa1\x5d\xe6\xc4\xa8\xd3\x84\x98\x71\xab\x05\xad\x13\x28\x04\x9e\xb7\x63\x4d\x81\x67\x52\x08\x75\x4a\xc0\xc7\x9d\x0c\xd5\x73\xbc\xb9\x12\xc7\x4a\x4e\x3d\x0b\x3c\x27\x10\x41\x04\xeb\xe8\xfe\x6a\xe4\x97\x0a\x19\xa7\xa0\xa4\xa8\xc1\xe6\x06\x51\x02\x95\x0c\xfe\xab\xb8\x24\x27\xce\xdc\x21\x81\x4f\x1f\x37\xfa\xfc\xff\x84\x79\x4e\x71\xac\xba\x5a\xdf\x8f\x13\x6a\x6f\xf4\x10\xaf\x36\xd1\xcd\x26\xa2\x7f\x65\x62\x1d\xdd\x6c\x22\xfe\xb0\x5c\x6d\xfe\xc6\x47\x47\x27\x1d\x4a\x37\xe1\xab\xa8\x29\xb9\x4c\x20\x9e\xa6\xe3\xe7\x97\x50\xc1\x4b\x99\x40\x8e\xd2\xa1\x99\x9f\x91\x9e\x98\x57\xe5\x84\x7c\xaf\x0c\x43\x43\x0c\x65\xfc\x68\xbd\x86\xcf\x74\x7b\x05\x92\x40\xac\xcf\x60\x95\xe0\x0c\xee\xb0\xf0\xf7\x18\x76\xa9\xd5\x66\x66\xde\x5e\xb9\xd0\x13\x0f\xb9\x12\xca\x24\x70\xf7\xf8\xf8\xb8\x7d\xfb\xe5\x59\xfe\x0b\x13\x88\x0d\x56\x57\x0e\x4f\xc8\xcb\x83\x4b\x60\xaf\x04\x9b\x93\x15\x48\xd9\x0d\x8a\xab\xf7\x28\xc2\xd0\xf3\xd8\xdf\xd1\x7b\x5a\x05\x43\x8f\x89\x53\x3a\x81\xf5\x48\xb8\x9f\x95\x34\xec\x16\x57\xb6\x48\xc3\x7e\x2b\xa6\x7e\x51\x65\x8b\x94\xf1\x67\xc8\x05\xb5\x76\x17\x74\x2b\xe6\xcf\x56\xd4\x2f\x6f\x7d\xfe\x41\xd6\x34\x02\x25\x2c\xdb\x16\xf2\xd1\x7a\x84\x9c\x32\x6a\x9d\xa1\x4c\xd9\x34\xd4\x5e\x81\xf1\xe7\x79\xe6\xa6\x31\x54\x96\xe8\x99\x06\x8f\x63\x6c\xff\x51\x5c\xe0\x73\x90\x6e\x12\x26\x98\x0e\xe7\x47\xd4\x9a\x7c\x17\x34\xcd\xf2\xbb\x51\x05\x17\xb8\xfc\x5a\xd1\x12\xe3\xcf\xab\xb6\x0d\xde\x04\xf4\xe5\xf5\x1b\x7e\x14\xf2\x03\xa9\xf8\x46\x2b\x9c\x0d\xa1\xc2\xcd\x05\xbc\xfa\x1d\x0c\xb6\x74\x76\x15\xdb\x55\x6c\x04\xec\xab\x77\xe5\xb1\x69\x50\xb2\xb6\x1d\xea\x1b\x5e\x3a\x18\xfa\x5f\x5f\xf6\x3b\x00\x00\xff\xff\x13\x37\xae\x77\x01\x07\x00\x00")

func dataUsers_export_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataUsers_export_templateHtml,
		"data/users_export_template.html",
	)
}

func dataUsers_export_templateHtml() (*asset, error) {
	bytes, err := dataUsers_export_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/users_export_template.html", size: 1793, mode: os.FileMode(420), modTime: time.Unix(1584766963, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/users_export_template.html": dataUsers_export_templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"users_export_template.html": &bintree{dataUsers_export_templateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

