// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/users_export_template.html
package bot

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataUsers_export_templateHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x8f\x9b\x30\x10\xbd\xe7\x57\x8c\x58\xad\xd4\x4a\x4b\x08\xd9\x6e\x9b\x12\x82\x2a\xed\xa9\x97\xaa\xea\xb1\xb7\x09\x1e\x88\x25\x63\x23\xdb\xf9\xa0\x88\xff\x5e\x19\xd2\x64\x61\xa1\x1f\x51\x89\x94\xc8\x99\x37\x6f\xde\x8c\x27\x2f\xf1\xce\x16\x02\x04\xca\x7c\xe3\x95\xd6\xdf\x6a\x2f\x99\xc5\x3b\x42\x96\xcc\x00\x00\xe2\x82\x2c\x42\xba\x43\x6d\xc8\x6e\xbc\xbd\xcd\xfc\x95\x77\x0e\x59\x6e\x05\x25\xcf\xea\xc0\xd9\x77\xd2\x0a\x7c\x78\x56\xd2\x6a\xbe\xdd\x73\xa6\x34\x99\x38\xe8\x10\x1d\xda\xd8\x4a\x10\xd8\xaa\xa4\x8d\x67\xe9\x64\x83\xd4\x18\x2f\x99\xb5\x41\xf7\x6c\x15\xab\xa0\xbe\x1c\xdd\x93\x29\x69\xfd\x0c\x0b\x2e\xaa\x08\x7c\x2c\x4b\x41\xbe\xa9\x8c\xa5\xe2\x01\x52\x14\x7c\xab\xf9\x03\x18\x94\xc6\x37\xa4\x79\xb6\xbe\x24\x37\x57\xda\x79\xea\x6b\x75\x1c\x10\x33\x6e\x4a\x81\x55\x04\x99\xa0\xd3\xba\x5f\x53\xd0\xc9\xcf\x84\x3a\x46\xe0\xf2\x8e\x1a\xcb\x29\xde\x54\x89\x7d\x21\x87\x9a\x05\x9d\x22\x08\x21\x84\xa7\xc5\xfd\x68\xe6\xa7\x82\x18\x47\x50\x52\x54\x60\x52\x4d\x24\x01\x25\x83\x37\x05\x97\xfe\x91\x33\xbb\x8b\xe0\xc3\xfb\x55\x79\x7a\x3b\x60\x9e\xaa\xd8\xaf\xba\x7c\xba\xef\x37\xd4\xdc\xa8\x21\x5c\xae\x16\x37\x8b\x58\xfc\x2f\x11\x4f\x8b\x9b\x45\x84\xef\xe6\xcb\xd5\xdf\xe8\x68\xe9\xa4\x25\x69\x07\x7c\x05\xea\x9c\xcb\x08\xc2\x61\x3b\x6e\x7f\x7d\x14\x3c\x97\x11\xa4\x24\x2d\xe9\xe9\x1d\xe9\x88\x79\x91\x0f\xc8\xb7\x4a\x33\xd2\xbe\x46\xc6\xf7\xc6\xd5\x70\x9d\xae\x47\x20\x11\x84\xe5\x09\x8c\x12\x9c\xc1\x1d\x65\xee\xd5\x87\x9d\x67\xb5\x9a\xd8\xb7\x17\x2a\xca\x81\x86\x54\x09\xa5\x23\xb8\x7b\x7c\x7c\x5c\xbf\xfe\xe5\x19\xfe\x83\x22\x08\x35\x15\x23\xc1\x23\xf1\x7c\x67\x23\xd8\x2a\xc1\xa6\xca\x0a\x42\x76\x43\xc5\xe5\xbf\x54\xfc\xf3\x75\xb8\xf7\x38\x68\xed\x27\x99\xc5\x41\xe7\x6d\xb1\xb3\x9b\x64\x16\x33\x7e\x80\x54\xa0\x31\x1b\xaf\x35\x8a\x5f\xde\xd6\xfb\xbe\x5b\xb6\x73\xa8\x0d\x97\xd7\xa0\x6b\xd2\x4b\xea\x5a\x90\x84\x79\xd3\x40\xda\xf3\x40\x48\x91\xa1\xb1\x1a\x99\x32\x71\x50\x9e\xd9\x03\xc6\x0f\x4e\x4b\xf7\x31\xa1\xa1\xae\x35\xca\x9c\x1c\xe9\xb5\xf0\xef\x75\x8d\x41\xda\x9b\x1f\x60\x5a\x9c\x5b\x49\xa3\xd3\x8d\x57\xd7\xf3\xaf\x5a\x65\x5c\xd0\xfc\x73\x81\x39\x85\x1f\x97\x4d\xe3\xbd\x4a\xe8\x46\xed\x1c\xbd\x97\xf2\x8d\x50\x7c\xc1\x82\x26\x53\x50\xd8\xa9\x84\x17\xf6\x7f\x1d\x6d\x32\x8a\xbd\x0c\xef\x02\xec\xa6\x37\x72\xac\x6b\x92\xac\x69\x2e\xf3\x0d\xce\x77\x1d\xb8\xbf\xba\xe4\x67\x00\x00\x00\xff\xff\x06\x0f\xfd\xfe\xf1\x06\x00\x00")

func dataUsers_export_templateHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataUsers_export_templateHtml,
		"data/users_export_template.html",
	)
}

func dataUsers_export_templateHtml() (*asset, error) {
	bytes, err := dataUsers_export_templateHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/users_export_template.html", size: 1777, mode: os.FileMode(420), modTime: time.Unix(1584756166, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/users_export_template.html": dataUsers_export_templateHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"users_export_template.html": &bintree{dataUsers_export_templateHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

